commonfields:
  id: 4fdb71a8-03b0-43ac-82b0-8057ec6836a4
  version: 42
vcShouldKeepItemLegacyProdMachine: false
name: jp-list-to-html
script: |-
  from typing import List, Dict

  def normalize_headers(records, target_headers):
      """
      Given an array of dictionaries and a list of target headers (which may also
      contain optional renaming instructions in the form "old_key:new_key"),
      returns a new list of normalized dictionaries.
      """

      # Build a mapping of original_key -> new_key
      mapping = {}
      for header in target_headers:
          if ":" in header:
              original, new = header.split(":", 1)
              mapping[original] = new
          else:
              mapping[header] = header

      # Process each record against the mapping
      normalized = []
      for record in records:
          new_record = {}
          for k, v in record.items():
              if k in mapping:
                  new_record[mapping[k]] = v
          normalized.append(new_record)

      return normalized


  def table_to_HTML(title: str, t: dict, headers: str) -> str:

      if t and not isinstance(t, list):
          t = [t]

      if headers:
          headers = headers.split(',')
          t = normalize_headers(t, headers)

      headers = t[0].keys()

      html_results = ''

      if title:
          html_results = '<h3>' + title + '</h3>'


      if t and len(t) > 0:
          html_results += '<table border="1" cellspacing="0" cellpadding="3" style="font-family: Arial, Helvetica, sans-serif; border-collapse: collapse; width: 100%; position: relative;"><tr>' + ''.join([f'<th style="padding-top: 12px; padding-bottom: 12px; text-align: left; background-color: #02447F;color: white; position: sticky; top: 0;">{x}</th>' for x in headers]) + '</tr>'

          for entry in t:
              vals = entry.values()
              if t.index(entry) % 2:
                  html_results += '<tr>' + ''.join([f'<td style="border: 1px solid #ddd; padding: 8px;">{x}</td>' for x in vals]) + '</tr>'
              else:
                  html_results += '<tr style="background-color: #f2f2f2;">' + ''.join([f'<td style="border: 1px solid #ddd; padding: 8px;">{x}</td>' for x in vals]) + '</tr>'
          html_results+= '</table>'
      else:
          return "Data does not exist"

      return CommandResults(
      outputs={'htmlTable': html_results},
      readable_output=html_results
      )


  def main():
      args = demisto.args()
      title = args.get('title')
      table = args.get('table')
      headers = args.get('headers')

      try:
          return_results(table_to_HTML(title, table, headers))
      except Exception as e:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error("\n".join(("Failed to execute {command} command.", "Error:", str(e))))


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()
type: python
tags:
- Utility
comment: Converts a given array to an HTML table
enabled: true
args:
- name: table
  required: true
  default: true
  description: The table to convert to HTML
  isArray: true
- name: title
  description: The optional title for the table
- name: headers
  description: 'A comma separated list of headers for each object (the keys).  If
    you want to map a header to a human readable value, the header can be provided
    in the format "original_header:humanReadable" where the value after the colon
    is set as the header. '
outputs:
- contextPath: htmlTable
scripttarget: 0
subtype: python3
pswd: ""
runonce: false
dockerimage: demisto/python3:3.10.8.36650
runas: DBotWeakRole
engineinfo: {}
mainengineinfo: {}
