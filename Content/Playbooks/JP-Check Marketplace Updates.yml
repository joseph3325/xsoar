commonfields:
  id: fa5054d5-c660-48e6-8793-0323a96b9671
  version: 62
vcShouldKeepItemLegacyProdMachine: false
name: JP-GetPendingUpdates
script: |-
  def order_change_logs(change_logs, current_version):

      data_list = [(version, details) for version, details in change_logs.items()]
      data_list_sorted = sorted(data_list, key=lambda x: datetime.fromisoformat(x[1]["released"].replace("Z", "+00:00")))
      ordered_list = [{"version": version, **details} for version, details in data_list_sorted]

      # Find the index of the given version
      index = next((i for i, item in enumerate(ordered_list) if item["version"] == current_version), None)

      if index is None:
          return []  # Version not found, return an empty list

      # Return the sublist after the found index
      return ordered_list[index + 1:]


  def convert_md(data):
      import re

      strip_chars = ['<!DOCTYPE html>', '<html>', '</html>', '</html>']
      headers_pattern = re.compile(r'</?h[1-3][^>]*>', re.IGNORECASE)

      # Execute the command to convert markdown to html and remove unwanted tags
      html = execute_command("mdToHtml", {'text': data})

      for each in strip_chars:
          html = html.replace(each, '')

      # Use regular expressions to replace all variations of <h1>, <h2>, <h3>, </h1>, </h2>, </h3> with <h4> and </h4>
      html = headers_pattern.sub(lambda match: '<h4>' if match.group(0).startswith('<h') else '</h4>', html)

      return html


  # get the target packs from the endpoint: /xsoar/public/v1/contentpacks/metadata/installed
  """
  Note the installed packs should have a schema of:

  {
      "currentVersion: "1.0",
      "id": "CommonReports",
      "lastInstallDate": "2024-10-25T16:53:00.713223889Z",
      "name": "Common Reports",
      "propagationLabels: ["all"],
      "updateAvailable": true,
      "userIsSubscribedToNotifications": false
  }

  """
  installed_packs = demisto.args()['installedPacks']
  # if not a list convert to a list
  if not isinstance(installed_packs, list): installed_packs = [installed_packs]
  # define the error and result objects
  errors = []
  details = []
  already_found = []
  installed_names = [x['name'] for x in installed_packs]
  # loop through each provided pack and call to the api for resulst
  for each in installed_packs:
      # if the target pack was already found skip this iteration
      if each['name'] in already_found: continue
      # call to the endpoint
      r = execute_command('core-api-post', {'body': {"packsQuery": each['name'], "page": 0, "size": 10}, 'uri': '/xsoar/public/v1/contentpacks/marketplace/search'})

      try:
          packs = r['response']['packs']

          for pack in packs:
              # define the object to hold the parsed results
              parsed = {}
              # if the pack name is in the provided installed packs
              if pack['name'] in installed_names: # grab relevant data and set to the parsed object
                  parsed['id'] = pack['id']
                  parsed['name'] = pack['name']
                  parsed['changeLog'] = pack['changelog']

                  # append the target details to the result object
                  details.append(parsed)
                  # append the pack name to the tracker array
                  already_found.append(pack['name'])

      except Exception as e:
          errors.append(e)

  sorted_details = []

  for each in installed_packs:
      for d in details:
          if each['name'] == d['name']:

              d['changeLog'] = order_change_logs(d['changeLog'], each['currentVersion'])
              d['currentVersion'] = each['currentVersion']


  for d in details:
      tmp = []
      change_log = d['changeLog']
      for each in change_log:

          each['releaseNotes'] = convert_md(each['releaseNotes'])


  md = f'{len(installed_packs)} packs provided. {len(details)} packs found'

  return_results(CommandResults(readable_output=md, outputs={'packDetails': details, 'errors': errors}))
type: python
tags: []
enabled: true
args:
  - name: installedPacks
    isArray: true
outputs:
  - contextPath: packDetails
scripttarget: 0
subtype: python3
pswd: ""
runonce: false
dockerimage: demisto/python3:3.12.8.1983910
runas: DBotWeakRole
engineinfo: {}
mainengineinfo: {}
